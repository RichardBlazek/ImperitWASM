@inject ImperitClient http;

@using Mode = Data.View;

@code{
	[Parameter] public Data.Session Session { get; set; } = new Data.Session();
	[Parameter] public bool IsActive { get; set; }
	[Parameter] public Action<Mode, int?, int?> Switch { get; set; } = ((a, x, y) => { });
	[Parameter] public bool Preview { get; set; }
	[Parameter] public Func<Task>? LogoutAsync { get; set; }
	[Parameter] public Func<Task>? NextTurnAsync { get; set; }
	[Parameter] public List<Data.ProvinceAppearance>? Provinces { get; set; }
	[Parameter] public Action<ImmutableArray<Data.ProvinceUpdate>>? UpdateProvinces { get; set; }
	int PlayerMoney = 0;
	async Task<int?> OnClick(int clicked, int? from)
	{
		var r = await http.PostAsync<Data.Click, Data.Switch>("api/Switch/Clicked", new Data.Click(Session.P, from, clicked, Session.G));
		Switch(r.View, r.From, r.To);
		return r.Select;
	}
	public async Task Update()
	{
		PlayerMoney = await http.PostAsync<Data.Session, int>("api/Player/Money", Session);
		UpdateProvinces!(await http.PostAsync<int, ImmutableArray<Data.ProvinceUpdate>>(Preview ? "api/Provinces/Preview" : "api/Provinces/Current", Session.G));
		this.StateHasChanged();
	}
	protected override Task OnInitializedAsync() => Update();
}
<nav>
	@if (Preview)
	{
		<a @onclick="() => Switch(Mode.Map, null, null)">Zpět</a>
		<a class="this">Náhled</a>
	}
	else
	{
		@if (IsActive)
		{
			<a @onclick="NextTurnAsync.Must()">Konec</a>
		}
		else
		{
			<a @onclick="LogoutAsync.Must()">Odhlášení</a>
		}
		<a class="this">Imperit</a>
		<a @onclick="() => Switch(Mode.Statistics, null, null)">@(PlayerMoney)@Sym.Money</a>
		<a @onclick="() => Switch(Mode.Preview, null, null)">Náhled</a>
	}
</nav>
<main><Map Width="1000" Height="1000" Provinces="Provinces" Select="OnClick" FontSize="9" SelectedColor="new Color(0, 0, 0, 100)" /></main>