@inject HttpClient http;
@inject ISessionStorageService cookies;

@using Mode = Shared.Data.Switch.Mode;

@code{
	[Parameter] public int LoggedIn { get; set; }
	[Parameter] public Func<Task>? LogoutAsync { get; set; }
	Mode Current;
	int? From = null, To = null;
	(int, int, string)? Player = null;
	void Switch(Mode mode = Mode.Map, int? from = null, int? to = null, (int, int, string)? player = null)
	{
		Current = mode;
		From = from;
		To = to;
		Player = player;
		this.StateHasChanged();
	}
	GameMap? Map { get; set; }
	async Task NextTurnAsync()
	{
		if (await http.PostJsonResponseAsync<Shared.Data.User, bool>("api/Game/NextTurn", new Shared.Data.User(LoggedIn, await cookies.GetStringAsync("login") ?? "")))
		{
			await LogoutAsync!();
		}
		else
		{
			Info = await http.PostJsonResponseAsync<int, Shared.Data.PlayerInfo>("api/Player/Info", LoggedIn);
			Map?.Update();
		}
	}
	Shared.Data.PlayerInfo Info = new Shared.Data.PlayerInfo(false, new Color());
	Shared.Data.DisplayableShape[]? Provinces = null;
	protected override async Task OnInitializedAsync()
	{
		Info = await http.PostJsonResponseAsync<int, Shared.Data.PlayerInfo>("api/Player/Info", LoggedIn);
		Provinces = await http.GetJsonAsync<Shared.Data.DisplayableShape[]>("api/Provinces/Shapes");
	}
	public void UpdateProvinces(Shared.Data.ProvinceVariables[] variables)
	{
		if (Provinces != null && variables.Length <= Provinces.Length)
		{
			for (int i = 0; i < variables.Length; ++i)
			{
				Provinces[i].F = variables[i].F;
				Provinces[i].T = Provinces[i].T.SkipLast(1).Append(variables[i].T).ToArray();
			}
		}
		
	}
}

<style>
	nav > a:hover {
		background-color: @Info.Color.WithAlpha(96);
	}
	nav > a.this {
		background-color: @Info.Color;
	}
</style>

@if (Current == Mode.Map)
{
	<GameMap UpdateProvinces="UpdateProvinces" @ref="Map" Provinces="Provinces" IsActive="Info.IsActive" Switch="(x, y, z) => Switch(x, y, z, null)" Preview="false" LoggedIn="LoggedIn" LogoutAsync="LogoutAsync!" NextTurnAsync="NextTurnAsync"/>
}
else if (Current == Mode.Preview)
{
	<GameMap UpdateProvinces="UpdateProvinces" Provinces="Provinces" IsActive="Info.IsActive" Switch="(x, y, z) => Switch(x, y, z, null)" Preview="true" LoggedIn="LoggedIn" LogoutAsync="LogoutAsync!" NextTurnAsync="NextTurnAsync"/>
}
else if (Current == Mode.Powers)
{
	<Powers Return="() => Switch()"/>
}
else if (Current == Mode.Move && From is int from && To is int to)
{
	<Move LoggedIn="LoggedIn" From="from" To="to" Return="() => Switch()"/>
}
else if (Current == Mode.Purchase && From is int from2)
{
	<Purchase LoggedIn="LoggedIn" Land="from2" Return="() => Switch()"/>
}
else if (Current == Mode.Recruit && From is int from3)
{
	<Recruitment LoggedIn="LoggedIn" Land="from3" Switch="x => Switch(x, null, null, null)"/>
}
else if (Current == Mode.Donation && Player is (int Money, int Recipient, string Name))
{
	<Donation LoggedIn="LoggedIn" Recipient="Recipient" RecipientName="@Name" Return="() => Switch()" PlayerMoney="Money"/>
}
else if (Current == Mode.Players)
{
	<Players LoggedIn="LoggedIn" Switch="Switch"/>
}