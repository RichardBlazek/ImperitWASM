@inject ImperitClient http;

@using Mode = Data.View;

@code{
	[Parameter] public Data.Session Session { get; set; } = new Data.Session();
	[Parameter] public Func<Task>? LogoutAsync { get; set; }
	Mode Current;
	int? From = null, To = null;
	Data.PlayerInfo? Player = null;
	Color PlayerColor = new Color();
	Data.GameInfo Info = new Data.GameInfo();
	List<Data.ProvinceAppearance>? Provinces = null;
	System.Timers.Timer timer = new System.Timers.Timer(400);
	GameMap? Map { get; set; }
	Task DoLogoutAsync()
	{
		timer.Stop();
		return LogoutAsync!();
	}
	void Switch(Mode mode = Mode.Map, int? from = null, int? to = null, Data.PlayerInfo? player = null)
	{
		(Current, From, To, Player) = (mode, from, to, player);
		StateHasChanged();
	}
	async Task NextTurnAsync()
	{
		if (await http.PostAsync<Data.Session, bool>("api/Game/NextTurn", Session))
		{
			await DoLogoutAsync();
		}
		else
		{
			await CheckSession();
		}
	}
	async Task CheckSession()
	{
		var info = await http.PostAsync<int, Data.GameInfo>("api/Game/Info", Session.G);
		if (!info.S)
		{
			await DoLogoutAsync();
		}
		else if (info.P != Info.P)
		{
			Info = info;
			Map?.Update(Info.P == Session.P);
		}
	}
	protected override async Task OnInitializedAsync()
	{
		await CheckSession();
		PlayerColor = await http.PostAsync<Data.PlayerId, Color>("api/Player/Color", new Data.PlayerId(Session.P, Session.G));
		Provinces = await http.PostAsync<int, List<Data.ProvinceAppearance>>("api/Provinces/Shapes", Session.G);
		timer.Elapsed += async (sender, e) => await CheckSession();
		timer.Start();
	}
	public void UpdateProvinces(ImmutableArray<Data.ProvinceUpdate> update)
	{
		if (Provinces is not null && update.Length <= Provinces.Count)
		{
			update.Each((change, i) => Provinces[i] = Provinces[i].Update(change.F, change.T));
		}
	}
}

<style>
	nav > a:hover {
		background-color: @PlayerColor.WithAlpha(96);
	}
	nav > a.this {
		background-color: @PlayerColor;
	}
</style>

@if (Current == Mode.Map)
{
	<GameMap @ref="Map" UpdateProvinces="UpdateProvinces" Provinces="Provinces" IsActive="Info.P == Session.P" Switch="(x, y, z) => Switch(x, y, z, null)" Preview="false" Session="Session" LogoutAsync="DoLogoutAsync" NextTurnAsync="NextTurnAsync"/>
}
else if (Current == Mode.Preview)
{
	<GameMap UpdateProvinces="UpdateProvinces" Provinces="Provinces" IsActive="Info.P == Session.P" Switch="(x, y, z) => Switch(x, y, z, null)" Preview="true" Session="Session" LogoutAsync="DoLogoutAsync" NextTurnAsync="NextTurnAsync"/>
}
else if (Current == Mode.Donation && Player is not null)
{
	<Donation Session="Session" Recipient="Player" Return="() => Switch()"/>
}
else if (Current == Mode.Move && From is int from && To is int to)
{
	<Move Session="Session" From="from" To="to" Return="() => Switch()"/>
}
else if (Current == Mode.Statistics)
{
	<Statistics Session="Session" Switch="Switch" LogoutAsync="DoLogoutAsync"/>
}
else if (Current == Mode.Purchase && From is int from2)
{
	<Purchase Session="Session" Land="from2" Return="() => Switch()"/>
}
else if (Current == Mode.Recruit && From is int from3)
{
	<Recruitment Session="Session" Land="from3" Switch="x => Switch(x, null, null, null)"/>
}