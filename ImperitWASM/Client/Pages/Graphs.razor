@code{
	[Parameter] public ImmutableArray<Color> Players { get; set; }
	[Parameter] public ImmutableArray<Powers> Powers { get; set; }
	static IEnumerable<string> Parts(IEnumerable<int> y_values, int count, int max_y, int x_offset, int y_offset, int width, int height)
	{
		return y_values.Select((y, x) => ((long)x * width / (count - 1) + x_offset) + "," + ((long)height - y * height / max_y + y_offset));
	}
	static string Polyline(IEnumerable<int> y_values, int count, int max_y, int x_offset, int y_offset, int width, int height, bool reverse = false)
	{
		return max_y == 0 || count < 2 ? "" : string.Join(' ', Parts(y_values, count, max_y, x_offset, y_offset, width, height).ReverseIf(reverse));
	}
	static string ToString(double num) => num.ToString(CultureInfo.InvariantCulture);
}
@if (!Players.IsDefaultOrEmpty && Powers is { IsDefault: false, Length: > 6 })
{
	var TotalAvg = Powers.Select(p => p.TotalAvg);
	var TotalMax = Powers.Max(p => p.TotalMax);
	var Ratios = Powers.Select(p => p.GetRatios()).ToImmutableArray();
	var RatioSums = new double[Ratios.Length];
	var Lives = Players.Select((_, i) => Math.Min(Powers.Length, Powers.Count(p => p[i].Alive) + 1)).ToImmutableArray();
	var Changes = Powers.Zip(Powers.Skip(1), (prev, next) => next.ChangesFrom(prev)).ToImmutableArray();

	<p>Síla:</p>
	<svg viewBox="-10 -10 1220 620" class="diagram">
		@for (int i = 0; i < Players.Length; ++i)
		{
			<polyline points="@Polyline(Powers.Select(p => p[i].Total).Take(Lives[i]), Powers.Length, TotalMax, 0, 0, 1200, 600)" fill="none" stroke="@Players[i]" stroke-width="3"></polyline>
		}
		<polyline points="@Polyline(TotalAvg, Powers.Length, TotalMax, 0, 0, 1200, 600)" fill="none" stroke="#FFF" stroke-width="1"></polyline>
	</svg>
	<p>Poměrná změna síly:</p>
	<svg viewBox="-10 -10 1220 620" class="diagram">
		@for (int p = 0; p < Players.Length; ++p)
		{
			@for (int c = 0; c < Changes.Length && c < Lives[p] - 1; ++c)
			{
				<circle cx="@(600 * (2 * c + 1) / (Powers.Length - 1))" cy="@(300 - (int)(300 * Changes[c][p]))" 
					fill="transparent" stroke="@Players[p]" r="@ToString(300.0 / Powers.Length)"></circle>
			}
		}
	</svg>
	<p>Počet vojáků a peněz v poměru k ostatním hráčům:</p>
	<svg viewBox="0 0 1200 600" class="diagram">
		@for (int i = 0; i < Players.Length; ++i)
		{
			<polyline points="@(Polyline(RatioSums.Select(r => (int)(r * 2000)).Take(Math.Min(Lives[i] + 1, Ratios.Length)), Ratios.Length, 2000, 0, 0, 1200, 600) + " " +
								Polyline(RatioSums.Select((r,j) => (int)((r + Ratios[j][i]) * 2000)).Take(Math.Min(Lives[i] + 1, Ratios.Length)), Ratios.Length, 2000, 0, 0, 1200, 600, true))" fill="@Players[i]"></polyline>
			RatioSums.Each((_, j) => RatioSums[j] += Ratios[j][i]);
		}
	</svg>
}