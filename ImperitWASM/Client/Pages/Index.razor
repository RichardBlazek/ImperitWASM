@page "/"

@inject ImperitClient http;
@inject SessionService cookies;

@code{
	Data.Session Session = new Data.Session();
	Data.GameState State = Data.GameState.Invalid;
	async Task UpdateState()
	{
		if (Session.IsSet())
		{
			State = await http.PostAsync<Data.Session, Data.GameState>("api/Player/Correct", Session);
			Session = State == Data.GameState.Invalid ? new Data.Session() : Session;
		}
	}
	async Task<bool> LoginAsync(Data.Login login)
	{
		Session = await http.PostAsync<Data.Login, Data.Session>("api/Player/Login", login);
		await cookies.SetAsync(Session);
		await UpdateState();
		StateHasChanged();
		return Session.IsSet();
	}
	async Task LogoutAsync()
	{
		await http.PostAsync("api/Player/Logout", Session.Key);
		await cookies.RemoveAsync();
		Session = new Data.Session();
		State = Game.State.Invalid;
		StateHasChanged();
	}
	void Start()
	{
		State = Game.State.Started;
		StateHasChanged();
	}
	protected override async Task OnInitializedAsync()
	{
		Session = await cookies.GetAsync();
		await UpdateState();
	}
}
@if (!Session.IsSet() || State == Data.GameState.Invalid)
{
	<StartSwitch LoginAsync="LoginAsync"/>
}
else if (State == Data.GameState.Started)
{
	<GameSwitch LogoutAsync="LogoutAsync" Session="Session"/>
}
else
{
	<WaitingRoom LogoutAsync="LogoutAsync" Session="Session" State="State" Start="Start"/>
}