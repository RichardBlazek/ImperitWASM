@page "/"

@inject ImperitClient http;
@inject SessionService cookies;

@code{
	Shared.Data.User? LoggedIn = null;
	async Task<bool> LoginAsync(int player, string password)
	{
		string? login = (await http.PostJsonResponseAsync<Shared.Data.Login, Shared.Data.StringValue>("api/Player/Login", new Shared.Data.Login(player, password))).Value;
		LoggedIn = login is string ? new Shared.Data.User(player, login) : null;
		await cookies.WriteUser(LoggedIn);
		this.StateHasChanged();
		return LoggedIn != null;
	}
	async Task LogoutAsync()
	{
		if (LoggedIn != null)
		{
			await http.PostJsonAsync<Shared.Data.User>("api/Player/Logout", LoggedIn);
			await cookies.Clear();
			LoggedIn = null;
			this.StateHasChanged();
		}
	}
	protected override async Task OnInitializedAsync()
	{
		LoggedIn = await cookies.ReadUser();
		LoggedIn = LoggedIn != null && await http.PostJsonResponseAsync<Shared.Data.User, bool>("api/Player/FromId", LoggedIn!) ? LoggedIn : null;
	}
}
@if (LoggedIn != null)
{
	<GameSwitch LogoutAsync="LogoutAsync" LoggedIn="LoggedIn"/>
}
else
{
	<StartSwitch LoginAsync="LoginAsync"/>
}