@page "/"

@inject ImperitClient http;
@inject SessionStorage storage;
@inject ProvinceContainer provinces;
@inject SettingsLoader settings;

@code{
	Game.State? State = null;
	async Task UpdateState()
	{
		if (storage.IsSet)
		{
			State = await http.PostAsync<Session, Game.State?>("api/Player/Correct", storage.Session);
			await storage.ResetAsync(State is null ? new Session() : storage.Session);
		}
	}
	async Task<bool> LoginAsync(Data.Login login)
	{
		await storage.LoginAsync(await http.PostAsync<Data.Login, LoginResult>("api/Player/Login", login));
		await UpdateState();
		StateHasChanged();
		return storage.IsSet;
	}
	async Task LogoutAsync()
	{
		await http.PostAsync<Session>("api/Player/Logout", storage.Session);
		await storage.ResetAsync();
		State = null;
		StateHasChanged();
	}
	void Start()
	{
		State = Game.State.Started;
		StateHasChanged();
	}
	protected override async Task OnInitializedAsync()
	{
		await storage.LoadAsync();
		await UpdateState();
		await provinces.Load("api/Provinces/Default");
		await settings.LoadAsync("api/Settings/Types");
	}
}
@if (!storage.IsSet || State is null)
{
	<StartSwitch LoginAsync="LoginAsync"/>
}
else if (State == Game.State.Started)
{
	<GameSwitch LogoutAsync="LogoutAsync"/>
}
else
{
	<WaitingRoom LogoutAsync="LogoutAsync" State="State.Value" Start="Start"/>
}