@page "/"

@inject HttpClient http;
@inject ISessionStorageService cookies;

@code{
	int? LoggedIn = null;
	async Task<bool> LoginAsync(int id, string password)
	{
		string? loginId = (await http.PostJsonResponseAsync<Shared.Data.Login, Shared.Data.StringValue>("api/Player/Login", new Shared.Data.Login(id, password))).Value;
		await cookies.SetItemAsync("login", loginId);
		bool success = !string.IsNullOrWhiteSpace(loginId);
		LoggedIn = success ? (int?)id : null;
		this.StateHasChanged();
		return success;
	}
	async Task LogoutAsync()
	{
		LoggedIn = null;
		await http.PostJsonAsync<string>("api/Player/Logout", await cookies.GetStringAsync("login") ?? "");
		await cookies.RemoveItemAsync("login");
		this.StateHasChanged();
	}
	protected override async Task OnInitializedAsync()
	{
		LoggedIn = await http.PostJsonResponseAsync<string, int?>("api/Player/FromId", await cookies.GetStringAsync("login") ?? "");
	}
}
@if (LoggedIn is int loggedIn)
{
	<GameSwitch LogoutAsync="LogoutAsync" LoggedIn="loggedIn"/>
}
else
{
	<StartSwitch LoginAsync="LoginAsync"/>
}