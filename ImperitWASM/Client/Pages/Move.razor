@inject ImperitClient http;

@code{
	Data.MoveErrors error = Data.MoveErrors.Ok;
	[Parameter] public Action Return { get; set; } = (() => { });
	[Parameter] public int From { get; set; }
	[Parameter] public int To { get; set; }
	[Parameter] public Data.Session Session { get; set; } = new Data.Session();
	Data.MoveModel model = new Data.MoveModel();
	Data.MoveInfo? Info = null;
	protected override async Task OnInitializedAsync()
	{
		Info = await http.PostAsync<Data.MoveData, Data.MoveInfo>("api/Command/MoveInfo", new Data.MoveData(From, To, Session.G));
		model.Soldiers = Data.Int.Create(Info.Soldiers.Length);
		if (!Info.Possible)
		{
			Return();
		}
	}
	async Task DoMove()
	{
		error = await http.PostAsync<Data.MoveCmd, Data.MoveErrors>("api/Command/Move", new Data.MoveCmd(Session.P, Session.Key, From, To, model.Soldiers.Select(s => s.Value).ToImmutableArray(), Session.G));
		if (error == Data.MoveErrors.Ok || error == Data.MoveErrors.NotPlaying)
		{
			Return();
		}
	}
	SoldierTypeInfobox? infobox;
}
<nav>
	<a @onclick="Return">Zrušit</a>
	<a class="this">Manévry</a>
</nav>
<main>
	<SoldierTypeInfobox @ref="infobox" />
	@if (error == Data.MoveErrors.FewSoldiers)
	{
		<p>V počáteční provincii není dostatek vojáků</p>
	}
	else if (error == Data.MoveErrors.LittleCapacity)
	{
		<p>Vojsko není přesunu schopné</p>
	}
	else if (error == Data.MoveErrors.Else)
	{
		<p>Přesun není možný</p>
	}
	@if (Info?.Soldiers is { IsDefault: false })
	{
		<EditForm Model="@model" OnValidSubmit="DoMove">
			<DataAnnotationsValidator /><ValidationSummary />
			<p>Začátek: @(Info.FromName) @Info.FromSoldiers</p>
			<p>Cíl: @(Info.ToName) @Info.ToSoldiers</p>
			<table>
				@foreach (var (i, type) in Info.Soldiers.Index())
				{
					<tr>
						<td @onclick="() => infobox?.Open(type)">@type.Name<sup>?</sup></td>
						<td><InputNumber @bind-Value="model.Soldiers[i].Value"/></td>
					</tr>
				}
				<tr><td></td><td><button type="submit">Přesunout</button></td></tr>
			</table>
		</EditForm>
	}
</main>