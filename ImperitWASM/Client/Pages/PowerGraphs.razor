@code{
	[Parameter] public IReadOnlyList<Data.DisplayablePlayer> Players { get; set; } = Array.Empty<Data.DisplayablePlayer>();
	[Parameter] public IReadOnlyList<PlayersPower> Powers { get; set; } = Array.Empty<PlayersPower>();
	static IEnumerable<string> Parts(IEnumerable<int> y_values, int count, int max_y, int x_offset, int y_offset, int width, int height)
	{
		return y_values.Select((y, x) => ((long)x * width / (count - 1) + x_offset) + "," + ((long)height - y * height / max_y + y_offset));
	}
	static string Polyline(IEnumerable<int> y_values, int count, int max_y, int x_offset, int y_offset, int width, int height, bool reverse = false)
	{
		return max_y == 0 || count < 2 ? "" : string.Join(' ', Parts(y_values, count, max_y, x_offset, y_offset, width, height).Reverse(reverse));
	}
	static string ToString(double num) => num.ToString(CultureInfo.InvariantCulture);
}
@{
	var total_avg = Powers.Select(p => p.TotalAvg);
	var total_max = Powers.Max(p => p.TotalMax);
	var ratios = Powers.Select(p => p.GetRatios()).ToArray();
	var ratio_sums = new double[ratios.Length];
	var life = Players.Select((_, i) => Math.Min(Powers.Count, Powers.Count(p => p[i].Alive) + 1)).ToArray();
}
@foreach (var (finals, player) in Powers[^1].Zip(Players, (a, b) => (a.Final, b)).Where(it => it.Final > 0))
{
	<p><span style="color:@player.Color;">@player.Name</span> @(new string(Sym.Star, finals)) </p>
}
<p>Síla:</p>
<svg viewBox="-10 -10 1220 620" class="diagram">
	@for (int i = 0; i < Players.Count; ++i)
	{
		<polyline points="@Polyline(Powers.Select(p => p[i].Total).Take(life[i]), Powers.Count, total_max, 0, 0, 1200, 600)" fill="none" stroke="@Players[i].Color" stroke-width="3"></polyline>
	}
	<polyline points="@Polyline(total_avg, Powers.Count, total_max, 0, 0, 1200, 600)" fill="none" stroke="#FFF" stroke-width="1"></polyline>
</svg>
@if (Powers.Count > 6)
{
	var changes = Powers.Zip(Powers.Skip(1), (prev, next) => prev.Zip(next, (p1, p2) => (double)p2.Total / p1.Total - 1.0).ToArray()).ToArray();
	<p>Poměrná změna síly:</p>
	<svg viewBox="-10 -10 1220 620" class="diagram">
		@for (int p = 0; p < Players.Count; ++p)
		{
			@for (int c = 0; c < changes.Length && c < life[p] - 1; ++c)
			{
				<circle cx="@(600 * (2 * c + 1) / (Powers.Count - 1))" cy="@(300 - (int)(300 * changes[c][p]))" 
					fill="transparent" stroke="@Players[p].Color" r="@ToString(300.0 / Powers.Count)"></circle>
			}
		}
	</svg>
}
<p>Počet vojáků a peněz v poměru k ostatním hráčům:</p>
<svg viewBox="0 0 1200 600" class="diagram">
	@for (int i = 0; i < Players.Count; ++i)
	{
		<polyline points="@(Polyline(ratio_sums.Select(r => (int)(r * 2000)).Take(Math.Min(life[i] + 1, ratios.Length)), ratios.Length, 2000, 0, 0, 1200, 600) + " " +
							Polyline(ratio_sums.Select((r,j) => (int)((r + ratios[j][i]) * 2000)).Take(Math.Min(life[i] + 1, ratios.Length)), ratios.Length, 2000, 0, 0, 1200, 600, true))" fill="@Players[i].Color"></polyline>
		ratio_sums = ratio_sums.Select((r, j) => r + ratios[j][i]).ToArray();
	}
</svg>